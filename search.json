[{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"a-first-example","dir":"Articles","previous_headings":"","what":"A first example","title":"The simTool package: Facilitate simulations","text":"Generate data Fit different models Repeat step 1 2 three times Summarize results respect different data generating functions models calculating mean standard deviation corresponding model terms","code":"regData <- function(n, SD) {   x <- seq(0, 1, length = n)   y <- 10 + 2 * x + rnorm(n, sd = SD)   tibble(x = x, y = y) }  eval_tibbles(   expand_tibble(fun = \"regData\", n = 5L, SD = 1:2),   expand_tibble(proc = \"lm\", formula = c(\"y~x\", \"y~I(x^2)\")),   post_analyze = broom::tidy,   summary_fun = list(mean = mean, sd = sd),   group_for_summary = \"term\",   replications = 3 ) Warning:  [1m [22mThe `.dots` argument of `group_by()` is deprecated as of dplyr 1.0.0.  [36mℹ [39m The deprecated feature was likely used in the  [34mdplyr [39m package.   Please report the issue at  [3m [34m<https://github.com/tidyverse/dplyr/issues> [39m [23m.  [90mThis warning is displayed once every 8 hours. [39m  [90mCall `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. [39m  [38;5;246m# A tibble: 16 × 12 [39m    fun         n    SD replications summary_fun proc  formula  term     estimate std.error statistic     [3m [38;5;246m<chr> [39m [23m    [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<int> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m        [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<chr> [39m [23m     [3m [38;5;246m<chr> [39m [23m        [3m [38;5;246m<dbl> [39m [23m      [3m [38;5;246m<dbl> [39m [23m      [3m [38;5;246m<dbl> [39m [23m  [38;5;250m 1 [39m regData     5     1            1 mean        lm    y~x      (Interc…   10.1      0.692     16.5    [38;5;250m 2 [39m regData     5     1            1 mean        lm    y~x      x           2.92     1.13       3.59   [38;5;250m 3 [39m regData     5     1            1 mean        lm    y~I(x^2) (Interc…   10.5      0.544     20.2    [38;5;250m 4 [39m regData     5     1            1 mean        lm    y~I(x^2) I(x^2)      2.71     1.04       3.20   [38;5;250m 5 [39m regData     5     1            1 sd          lm    y~x      (Interc…    1.45     0.288      6.89   [38;5;250m 6 [39m regData     5     1            1 sd          lm    y~x      x           1.84     0.471      3.71   [38;5;250m 7 [39m regData     5     1            1 sd          lm    y~I(x^2) (Interc…    1.32     0.185      4.38   [38;5;250m 8 [39m regData     5     1            1 sd          lm    y~I(x^2) I(x^2)      2.15     0.352      2.62   [38;5;250m 9 [39m regData     5     2            1 mean        lm    y~x      (Interc…    9.86     1.26       7.85   [38;5;250m10 [39m regData     5     2            1 mean        lm    y~x      x           3.42     2.05       1.66   [38;5;250m11 [39m regData     5     2            1 mean        lm    y~I(x^2) (Interc…   10.6      1.18       8.99   [38;5;250m12 [39m regData     5     2            1 mean        lm    y~I(x^2) I(x^2)      2.65     2.24       1.17   [38;5;250m13 [39m regData     5     2            1 sd          lm    y~x      (Interc…    0.209    0.037 [4m4 [24m     0.393  [38;5;250m14 [39m regData     5     2            1 sd          lm    y~x      x           1.17     0.061 [4m0 [24m     0.515  [38;5;250m15 [39m regData     5     2            1 sd          lm    y~I(x^2) (Interc…    0.128    0.048 [4m8 [24m     0.436  [38;5;250m16 [39m regData     5     2            1 sd          lm    y~I(x^2) I(x^2)      1.32     0.092 [4m7 [24m     0.542  [38;5;246m# ℹ 1 more variable: p.value <dbl> [39m Number of data generating functions: 2 Number of analyzing procedures: 2 Number of replications: 3 Estimated replications per hour: 87214 Start of the simulation: 2025-04-05 13:33:17.152267 End of the simulation: 2025-04-05 13:33:17.276098"},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"The simTool package: Facilitate simulations","text":"purpose simTool package disengage research kind administrative source code usually annoying necessity simulation study. vignette give introduction simTool package mainly examples growing complexity. workhorse function eval_tibbles. Every parameter function discussed briefly functionality illustrated least one example.","code":""},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"The simTool package: Facilitate simulations","text":"workflow quite easy natural. One defines two data.frames (tibbles), first one represents functions generate data sets second one represents functions analyze data. two data.frames passed eval_tibbles conducts simulation. Afterwards, results can nicely displayed data.frame.","code":""},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"defining-the-data-frames-for-data-generation-and-analysis","dir":"Articles","previous_headings":"","what":"Defining the data.frames for data generation and analysis","title":"The simTool package: Facilitate simulations","text":"3 rules: first column ( character vector) defines functions called columns parameters passed function specified first column entry NA passed function specified first column. function expand_tibble convenient function defining data.frames. now define data generation functions first simulation. data.frame represents 8 R-functions. instance, second row represents function generates 20 exponential distributed random variables rate 1. Since mean=NA second row, parameter passed rexp. Similar, define data.frame data analyzing functions. Hence, data.frame represents 3 R-functions .e. calculating minimum arithmetic mean trim=0.1 trim=0.2.","code":"print(dg <- dplyr::bind_rows(   expand_tibble(fun = \"rexp\", n = c(10L, 20L), rate = 1:2),   expand_tibble(fun = \"rnorm\", n = c(10L, 20L), mean = 1:2) ))  [38;5;246m# A tibble: 8 × 4 [39m   fun       n  rate  mean    [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<int> [39m [23m  [38;5;250m1 [39m rexp     10     1     [31mNA [39m  [38;5;250m2 [39m rexp     20     1     [31mNA [39m  [38;5;250m3 [39m rexp     10     2     [31mNA [39m  [38;5;250m4 [39m rexp     20     2     [31mNA [39m  [38;5;250m5 [39m rnorm    10     [31mNA [39m     1  [38;5;250m6 [39m rnorm    20     [31mNA [39m     1  [38;5;250m7 [39m rnorm    10     [31mNA [39m     2  [38;5;250m8 [39m rnorm    20     [31mNA [39m     2 print(pg <- dplyr::bind_rows(   expand_tibble(proc = \"min\"),   expand_tibble(proc = \"mean\", trim = c(0.1, 0.2)) ))  [38;5;246m# A tibble: 3 × 2 [39m   proc   trim    [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m min     [31mNA [39m    [38;5;250m2 [39m mean    0.1  [38;5;250m3 [39m mean    0.2"},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"the-workhorse-eval_tibbles","dir":"Articles","previous_headings":"","what":"The workhorse eval_tibbles","title":"The simTool package: Facilitate simulations","text":"workhorse eval_tibbles following simplified pseudo code: object returned eval_tibbles list class eval_tibbles. can see, function always estimates number replications can done one hour.","code":"1.  convert dg to R-functions  {g_1, ..., g_k}  2.  convert pg to R-functions  {f_1, ..., f_L}  3.  initialize result object  4.  append dg and pg to the result object  5.  t1 = current.time()  6.  for g in  {g_1, ..., g_k}  7.      for r in 1:replications (optionally in a parallel manner)  8.          data = g()  9.          for f in  {f_1, \\ldots, f_L}  10.             append f(data) to the result object (optionally apply a post-analyze-function) 11.         optionally append data to the result object  12.      optionally summarize the result object over all            replications but separately for f_1, ..., f_L (and optional group variables) 13. t2 = current.time()  14. Estimate the number of replications per hour from t1 and t2 dg <- expand_tibble(fun = \"rnorm\", n = 10, mean = 1:2) pg <- expand_tibble(proc = \"min\") eg <- eval_tibbles(data_grid = dg, proc_grid = pg, replications = 2) eg  [38;5;246m# A tibble: 4 × 6 [39m   fun       n  mean replications proc  results    [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<int> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m    [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m rnorm    10     1            1 min    - [31m1 [39m [31m. [39m [31m75 [39m   [38;5;250m2 [39m rnorm    10     1            2 min    - [31m0 [39m [31m. [39m [31m212 [39m  [38;5;250m3 [39m rnorm    10     2            1 min     0.232  [38;5;250m4 [39m rnorm    10     2            2 min     1.16  Number of data generating functions: 2 Number of analyzing procedures: 1 Number of replications: 2 Estimated replications per hour: 79471023 Start of the simulation: 2025-04-05 13:33:17.744066 End of the simulation: 2025-04-05 13:33:17.744157"},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"parameter-replications","dir":"Articles","previous_headings":"The workhorse eval_tibbles","what":"Parameter replications","title":"The simTool package: Facilitate simulations","text":"course, parameter controls number replications conducted.","code":"eg <- eval_tibbles(data_grid = dg, proc_grid = pg, replications = 3) eg  [38;5;246m# A tibble: 6 × 6 [39m   fun       n  mean replications proc  results    [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<int> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m    [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m rnorm    10     1            1 min    - [31m1 [39m [31m. [39m [31m30 [39m   [38;5;250m2 [39m rnorm    10     1            2 min    - [31m0 [39m [31m. [39m [31m574 [39m  [38;5;250m3 [39m rnorm    10     1            3 min     0.503  [38;5;250m4 [39m rnorm    10     2            1 min     0.729  [38;5;250m5 [39m rnorm    10     2            2 min     1.06   [38;5;250m6 [39m rnorm    10     2            3 min    - [31m0 [39m [31m. [39m [31m272 [39m Number of data generating functions: 2 Number of analyzing procedures: 1 Number of replications: 3 Estimated replications per hour: 99557105 Start of the simulation: 2025-04-05 13:33:17.840691 End of the simulation: 2025-04-05 13:33:17.840799"},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"parameter-discard_generated_data","dir":"Articles","previous_headings":"The workhorse eval_tibbles","what":"Parameter discard_generated_data","title":"The simTool package: Facilitate simulations","text":"eval_tibbles saves generated data sets. general, sometimes handy data sets order investigate unusual unexpected results. saving generated data sets can memory consuming. Stop saving generated data sets can obtained setting discardGeneratedData = TRUE. See command line 11 pseudo code.","code":"eg <- eval_tibbles(data_grid = dg, proc_grid = pg, replications = 1) eg$simulation  [38;5;246m# A tibble: 2 × 6 [39m   fun       n  mean replications proc   results    [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<int> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m     [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m rnorm    10     1            1 min   - [31m0 [39m [31m. [39m [31m554 [39m    [38;5;250m2 [39m rnorm    10     2            1 min    0.004 [4m9 [24m [4m9 [24m eg$generated_data [[1]]  [1]  1.04382239 -0.02157836  1.79342772  1.50162446 -0.55447035  1.88349784  0.79223220  2.83137401  [9]  1.17726438  0.19415935  [[2]]  [1] 3.947932470 2.121197052 1.645050873 3.052866250 3.163113962 1.201167182 2.775455294 0.004992648  [9] 1.649437807 2.380864742"},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"parameter-summary_fun","dir":"Articles","previous_headings":"The workhorse eval_tibbles","what":"Parameter summary_fun","title":"The simTool package: Facilitate simulations","text":"stated command line 12 can summarize result objects replications separately data analyzing functions. Note, specifying parameter summary_fun generated data sets individual result objects discarded. example discard 3×10003 \\times 1000 data sets 3×1000×23 \\times 1000 \\times 2 individual result objects.","code":"dg <- expand_tibble(fun = \"runif\", n = c(10, 20, 30)) pg <- expand_tibble(proc = c(\"min\", \"max\")) eval_tibbles(   data_grid = dg, proc_grid = pg, replications = 1000,   summary_fun = list(mean = mean) )  [38;5;246m# A tibble: 6 × 6 [39m   fun       n replications summary_fun proc   value    [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<dbl> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m        [3m [38;5;246m<chr> [39m [23m   [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m runif    10            1 mean        min   0.090 [4m4 [24m  [38;5;250m2 [39m runif    10            1 mean        max   0.910   [38;5;250m3 [39m runif    20            1 mean        min   0.048 [4m6 [24m  [38;5;250m4 [39m runif    20            1 mean        max   0.953   [38;5;250m5 [39m runif    30            1 mean        min   0.031 [4m4 [24m  [38;5;250m6 [39m runif    30            1 mean        max   0.967  Number of data generating functions: 3 Number of analyzing procedures: 2 Number of replications: 1000 Estimated replications per hour: 48700819 Start of the simulation: 2025-04-05 13:33:18.040236 End of the simulation: 2025-04-05 13:33:18.114157 eval_tibbles(   data_grid = dg, proc_grid = pg, replications = 1000,   summary_fun = list(mean = mean, sd = sd) )  [38;5;246m# A tibble: 12 × 6 [39m    fun       n replications summary_fun proc   value     [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<dbl> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m        [3m [38;5;246m<chr> [39m [23m   [3m [38;5;246m<dbl> [39m [23m  [38;5;250m 1 [39m runif    10            1 mean        min   0.093 [4m0 [24m  [38;5;250m 2 [39m runif    10            1 mean        max   0.907   [38;5;250m 3 [39m runif    10            1 sd          min   0.086 [4m5 [24m  [38;5;250m 4 [39m runif    10            1 sd          max   0.086 [4m0 [24m  [38;5;250m 5 [39m runif    20            1 mean        min   0.046 [4m3 [24m  [38;5;250m 6 [39m runif    20            1 mean        max   0.952   [38;5;250m 7 [39m runif    20            1 sd          min   0.042 [4m5 [24m  [38;5;250m 8 [39m runif    20            1 sd          max   0.046 [4m8 [24m  [38;5;250m 9 [39m runif    30            1 mean        min   0.032 [4m5 [24m  [38;5;250m10 [39m runif    30            1 mean        max   0.966   [38;5;250m11 [39m runif    30            1 sd          min   0.032 [4m3 [24m  [38;5;250m12 [39m runif    30            1 sd          max   0.031 [4m1 [24m Number of data generating functions: 3 Number of analyzing procedures: 2 Number of replications: 1000 Estimated replications per hour: 44892342 Start of the simulation: 2025-04-05 13:33:18.142846 End of the simulation: 2025-04-05 13:33:18.223038"},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"parameter-post_analyze","dir":"Articles","previous_headings":"The workhorse eval_tibbles","what":"Parameter post_analyze","title":"The simTool package: Facilitate simulations","text":"Sometimes analyzing functions return quite complicated objects like Section first example. parameter post_analyze (specified) applied directly result generated (see command line 10). Note, purrr::compose can handy post-analyzing-function can defined single functions:","code":"eval_tibbles(   expand_tibble(fun = \"regData\", n = 5L, SD = 1:2),   expand_tibble(proc = \"lm\", formula = c(\"y~x\", \"y~I(x^2)\")),   replications = 2 )  [38;5;246m# A tibble: 8 × 7 [39m   fun         n    SD replications proc  formula  results    [3m [38;5;246m<chr> [39m [23m    [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<int> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<chr> [39m [23m     [3m [38;5;246m<list> [39m [23m   [38;5;250m1 [39m regData     5     1            1 lm    y~x       [38;5;246m<lm> [39m     [38;5;250m2 [39m regData     5     1            1 lm    y~I(x^2)  [38;5;246m<lm> [39m     [38;5;250m3 [39m regData     5     1            2 lm    y~x       [38;5;246m<lm> [39m     [38;5;250m4 [39m regData     5     1            2 lm    y~I(x^2)  [38;5;246m<lm> [39m     [38;5;250m5 [39m regData     5     2            1 lm    y~x       [38;5;246m<lm> [39m     [38;5;250m6 [39m regData     5     2            1 lm    y~I(x^2)  [38;5;246m<lm> [39m     [38;5;250m7 [39m regData     5     2            2 lm    y~x       [38;5;246m<lm> [39m     [38;5;250m8 [39m regData     5     2            2 lm    y~I(x^2)  [38;5;246m<lm> [39m    Number of data generating functions: 2 Number of analyzing procedures: 2 Number of replications: 2 Estimated replications per hour: 1062820 Start of the simulation: 2025-04-05 13:33:18.317779 End of the simulation: 2025-04-05 13:33:18.324554 eval_tibbles(   expand_tibble(fun = \"regData\", n = 5L, SD = 1:2),   expand_tibble(proc = \"lm\", formula = c(\"y~x\", \"y~I(x^2)\")),   post_analyze = purrr::compose(function(mat) mat[\"(Intercept)\", \"Estimate\"], coef, summary.lm),   replications = 2 )  [38;5;246m# A tibble: 8 × 7 [39m   fun         n    SD replications proc  formula  results    [3m [38;5;246m<chr> [39m [23m    [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<int> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<chr> [39m [23m       [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m regData     5     1            1 lm    y~x        10.3   [38;5;250m2 [39m regData     5     1            1 lm    y~I(x^2)   10.2   [38;5;250m3 [39m regData     5     1            2 lm    y~x         9.43  [38;5;250m4 [39m regData     5     1            2 lm    y~I(x^2)    9.95  [38;5;250m5 [39m regData     5     2            1 lm    y~x        13.5   [38;5;250m6 [39m regData     5     2            1 lm    y~I(x^2)   13.3   [38;5;250m7 [39m regData     5     2            2 lm    y~x         9.27  [38;5;250m8 [39m regData     5     2            2 lm    y~I(x^2)    9.25 Number of data generating functions: 2 Number of analyzing procedures: 2 Number of replications: 2 Estimated replications per hour: 545630 Start of the simulation: 2025-04-05 13:33:18.452665 End of the simulation: 2025-04-05 13:33:18.46586"},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"parameter-group_for_summary","dir":"Articles","previous_headings":"The workhorse eval_tibbles","what":"Parameter group_for_summary","title":"The simTool package: Facilitate simulations","text":"result object data.frame , instance order summarize replications necessary additional group calculations respect another variable. variable can passed group_for_summary","code":"presever_rownames <- function(mat) {   rn <- rownames(mat)   ret <- tibble::as_tibble(mat)   ret$term <- rn   ret }  eval_tibbles(   expand_tibble(fun = \"regData\", n = 5L, SD = 1:2),   expand_tibble(proc = \"lm\", formula = c(\"y~x\", \"y~I(x^2)\")),   post_analyze = purrr::compose(presever_rownames, coef, summary),   replications = 3 )  [38;5;246m# A tibble: 24 × 11 [39m    fun         n    SD replications proc  formula  Estimate `Std. Error` `t value` `Pr(>|t|)` term       [3m [38;5;246m<chr> [39m [23m    [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<int> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<chr> [39m [23m        [3m [38;5;246m<dbl> [39m [23m         [3m [38;5;246m<dbl> [39m [23m      [3m [38;5;246m<dbl> [39m [23m       [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<chr> [39m [23m   [38;5;250m 1 [39m regData     5     1            1 lm    y~x          9.91        0.670    14.8     0.000 [4m6 [24m [4m7 [24m [4m1 [24m (Inte…  [38;5;250m 2 [39m regData     5     1            1 lm    y~x          2.80        1.09      2.56    0.083 [4m1 [24m   x       [38;5;250m 3 [39m regData     5     1            1 lm    y~I(x^2)    10.3         0.577    17.9     0.000 [4m3 [24m [4m8 [24m [4m1 [24m (Inte…  [38;5;250m 4 [39m regData     5     1            1 lm    y~I(x^2)     2.63        1.10      2.40    0.096 [4m1 [24m   I(x^2)  [38;5;250m 5 [39m regData     5     1            2 lm    y~x          9.32        0.537    17.3     0.000 [4m4 [24m [4m1 [24m [4m9 [24m (Inte…  [38;5;250m 6 [39m regData     5     1            2 lm    y~x          2.11        0.878     2.40    0.096 [4m0 [24m   x       [38;5;250m 7 [39m regData     5     1            2 lm    y~I(x^2)     9.78        0.590    16.6     0.000 [4m4 [24m [4m7 [24m [4m8 [24m (Inte…  [38;5;250m 8 [39m regData     5     1            2 lm    y~I(x^2)     1.56        1.12      1.39    0.259    I(x^2)  [38;5;250m 9 [39m regData     5     1            3 lm    y~x          9.64        1.16      8.28    0.003 [4m6 [24m [4m9 [24m  (Inte…  [38;5;250m10 [39m regData     5     1            3 lm    y~x          1.83        1.90      0.965   0.406    x       [38;5;246m# ℹ 14 more rows [39m Number of data generating functions: 2 Number of analyzing procedures: 2 Number of replications: 3 Estimated replications per hour: 641721 Start of the simulation: 2025-04-05 13:33:18.559466 End of the simulation: 2025-04-05 13:33:18.576296 eval_tibbles(   expand_tibble(fun = \"regData\", n = 5L, SD = 1:2),   expand_tibble(proc = \"lm\", formula = c(\"y~x\", \"y~I(x^2)\")),   post_analyze = purrr::compose(presever_rownames, coef, summary),   summary_fun = list(mean = mean, sd = sd),   group_for_summary = \"term\",   replications = 3 )  [38;5;246m# A tibble: 16 × 12 [39m    fun         n    SD replications summary_fun proc  formula  term  Estimate `Std. Error` `t value`     [3m [38;5;246m<chr> [39m [23m    [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<int> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m        [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<chr> [39m [23m     [3m [38;5;246m<chr> [39m [23m     [3m [38;5;246m<dbl> [39m [23m         [3m [38;5;246m<dbl> [39m [23m      [3m [38;5;246m<dbl> [39m [23m  [38;5;250m 1 [39m regData     5     1            1 mean        lm    y~x      (Int…    9.95         0.500     53.5   [38;5;250m 2 [39m regData     5     1            1 mean        lm    y~x      x        2.04         0.817      6.86  [38;5;250m 3 [39m regData     5     1            1 mean        lm    y~I(x^2) (Int…   10.3          0.444     28.5   [38;5;250m 4 [39m regData     5     1            1 mean        lm    y~I(x^2) I(x^…    1.93         0.845      2.80  [38;5;250m 5 [39m regData     5     1            1 sd          lm    y~x      (Int…    0.505        0.404     66.9   [38;5;250m 6 [39m regData     5     1            1 sd          lm    y~x      x        0.382        0.660      8.87  [38;5;250m 7 [39m regData     5     1            1 sd          lm    y~I(x^2) (Int…    0.608        0.202     17.8   [38;5;250m 8 [39m regData     5     1            1 sd          lm    y~I(x^2) I(x^…    0.759        0.385      1.87  [38;5;250m 9 [39m regData     5     2            1 mean        lm    y~x      (Int…    9.38         0.787     13.6   [38;5;250m10 [39m regData     5     2            1 mean        lm    y~x      x        3.28         1.28       2.80  [38;5;250m11 [39m regData     5     2            1 mean        lm    y~I(x^2) (Int…    9.99         0.823     14.1   [38;5;250m12 [39m regData     5     2            1 mean        lm    y~I(x^2) I(x^…    2.74         1.57       1.79  [38;5;250m13 [39m regData     5     2            1 sd          lm    y~x      (Int…    1.06         0.271      7.18  [38;5;250m14 [39m regData     5     2            1 sd          lm    y~x      x        3.14         0.443      2.41  [38;5;250m15 [39m regData     5     2            1 sd          lm    y~I(x^2) (Int…    0.862        0.365      6.91  [38;5;250m16 [39m regData     5     2            1 sd          lm    y~I(x^2) I(x^…    2.74         0.694      1.73  [38;5;246m# ℹ 1 more variable: `Pr(>|t|)` <dbl> [39m Number of data generating functions: 2 Number of analyzing procedures: 2 Number of replications: 3 Estimated replications per hour: 211410 Start of the simulation: 2025-04-05 13:33:18.681837 End of the simulation: 2025-04-05 13:33:18.732923"},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"parameter-ncpus-and-cluster_seed","dir":"Articles","previous_headings":"The workhorse eval_tibbles","what":"Parameter ncpus and cluster_seed","title":"The simTool package: Facilitate simulations","text":"specifying ncpus larger 1 cluster objected created user passed parameter cluster discussed next section. stated command line 7, replications parallelized. case, means roughly every CPU conducts 5 replications. parameter cluster_seed must integer vector length 6 serves purpose function set.seed. default, cluster_seed equals rep(12345, 6). Note, order reproduce simulation study also necessary ncpus change.","code":"eval_tibbles(   data_grid = dg, proc_grid = pg, replications = 10,   ncpus = 2, summary_fun = list(mean = mean) )  [38;5;246m# A tibble: 6 × 6 [39m   fun       n replications summary_fun proc   value    [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<dbl> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m        [3m [38;5;246m<chr> [39m [23m   [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m runif    10            1 mean        min   0.088 [4m4 [24m  [38;5;250m2 [39m runif    10            1 mean        max   0.912   [38;5;250m3 [39m runif    20            1 mean        min   0.065 [4m6 [24m  [38;5;250m4 [39m runif    20            1 mean        max   0.947   [38;5;250m5 [39m runif    30            1 mean        min   0.036 [4m2 [24m  [38;5;250m6 [39m runif    30            1 mean        max   0.969  Number of data generating functions: 3 Number of analyzing procedures: 2 Number of replications: 10 Estimated replications per hour: 95799 Start of the simulation: 2025-04-05 13:33:19.076426 End of the simulation: 2025-04-05 13:33:19.452209"},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"parameter-cluster","dir":"Articles","previous_headings":"The workhorse eval_tibbles","what":"Parameter cluster","title":"The simTool package: Facilitate simulations","text":"user can create cluster . also enables user distribute replications different computers network. can see cluster consists 3 workers. Hence, reproduces results last code chunk . note, user starts cluster, user also stop cluster. cluster created within eval_tibbles specifying ncpus also stop within eval_tibbles.","code":"library(parallel) cl <- makeCluster(rep(\"localhost\", 2), type = \"PSOCK\") eval_tibbles(   data_grid = dg, proc_grid = pg, replications = 10,   cluster = cl, summary_fun = list(mean = mean) )  [38;5;246m# A tibble: 6 × 6 [39m   fun       n replications summary_fun proc   value    [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<dbl> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m        [3m [38;5;246m<chr> [39m [23m   [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m runif    10            1 mean        min   0.088 [4m4 [24m  [38;5;250m2 [39m runif    10            1 mean        max   0.912   [38;5;250m3 [39m runif    20            1 mean        min   0.065 [4m6 [24m  [38;5;250m4 [39m runif    20            1 mean        max   0.947   [38;5;250m5 [39m runif    30            1 mean        min   0.036 [4m2 [24m  [38;5;250m6 [39m runif    30            1 mean        max   0.969  Number of data generating functions: 3 Number of analyzing procedures: 2 Number of replications: 10 Estimated replications per hour: 97263 Start of the simulation: 2025-04-05 13:33:19.787899 End of the simulation: 2025-04-05 13:33:20.158029 stopCluster(cl)"},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"parameter-cluster_libraries-and-cluster_global_objects","dir":"Articles","previous_headings":"The workhorse eval_tibbles","what":"Parameter cluster_libraries and cluster_global_objects","title":"The simTool package: Facilitate simulations","text":"newly created cluster ``empty’’. Hence, simulation study requires libraries objects global environment, must transferred cluster. Lets look standard example boot package. following data generating function extremely boring always returns data set city library boot. function ratio exists moment global environment. load boot package. Hence, load boot package setting cluster_libraries = c(“boot”) transfer function ratio setting cluster_global_objects = c(“ratio”). course, possible set cluster_global_objects=ls(), objects global environment transferred workers.","code":"library(boot) ratio <- function(d, w) sum(d$x * w) / sum(d$u * w) city.boot <- boot(city, ratio,   R = 999, stype = \"w\",   sim = \"ordinary\" ) boot.ci(city.boot,   conf = c(0.90, 0.95),   type = c(\"norm\", \"basic\", \"perc\", \"bca\") ) BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS Based on 999 bootstrap replicates  CALL :  boot.ci(boot.out = city.boot, conf = c(0.9, 0.95), type = c(\"norm\",      \"basic\", \"perc\", \"bca\"))  Intervals :  Level      Normal              Basic          90%   ( 1.098,  1.861 )   ( 1.047,  1.772 )    95%   ( 1.026,  1.934 )   ( 0.860,  1.799 )    Level     Percentile            BCa           90%   ( 1.268,  1.994 )   ( 1.271,  2.002 )    95%   ( 1.241,  2.180 )   ( 1.242,  2.195 )   Calculations and Intervals on Original Scale returnCity <- function() {   city } bootConfInt <- function(data) {   city.boot <- boot(data, ratio,     R = 999, stype = \"w\",     sim = \"ordinary\"   )   boot.ci(city.boot,     conf = c(0.90, 0.95),     type = c(\"norm\", \"basic\", \"perc\", \"bca\")   ) } dg <- expand_tibble(fun = \"returnCity\") pg <- expand_tibble(proc = \"bootConfInt\") eval_tibbles(dg, pg,   replications = 10, ncpus = 2,   cluster_libraries = c(\"boot\"),   cluster_global_objects = c(\"ratio\") )  [38;5;246m# A tibble: 10 × 4 [39m    fun        replications proc        results      [3m [38;5;246m<chr> [39m [23m              [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m        [3m [38;5;246m<list> [39m [23m    [38;5;250m 1 [39m returnCity            1 bootConfInt  [38;5;246m<bootci> [39m  [38;5;250m 2 [39m returnCity            2 bootConfInt  [38;5;246m<bootci> [39m  [38;5;250m 3 [39m returnCity            3 bootConfInt  [38;5;246m<bootci> [39m  [38;5;250m 4 [39m returnCity            4 bootConfInt  [38;5;246m<bootci> [39m  [38;5;250m 5 [39m returnCity            5 bootConfInt  [38;5;246m<bootci> [39m  [38;5;250m 6 [39m returnCity            6 bootConfInt  [38;5;246m<bootci> [39m  [38;5;250m 7 [39m returnCity            7 bootConfInt  [38;5;246m<bootci> [39m  [38;5;250m 8 [39m returnCity            8 bootConfInt  [38;5;246m<bootci> [39m  [38;5;250m 9 [39m returnCity            9 bootConfInt  [38;5;246m<bootci> [39m  [38;5;250m10 [39m returnCity           10 bootConfInt  [38;5;246m<bootci> [39m Number of data generating functions: 1 Number of analyzing procedures: 1 Number of replications: 10 Estimated replications per hour: 211116 Start of the simulation: 2025-04-05 13:33:20.957689 End of the simulation: 2025-04-05 13:33:21.128211"},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"parameter-envir","dir":"Articles","previous_headings":"The workhorse eval_tibbles","what":"Parameter envir","title":"The simTool package: Facilitate simulations","text":"function eval_tibbles generates first step function calls data_grid proc_grid. achieved applying R-function get. default, envir=globalenv() thus get searches global environment current R session. example shows use parameter envir.","code":"# masking summary from the base package summary <- function(x) tibble(sd = sd(x)) g <- function(x) tibble(q0.1 = quantile(x, 0.1)) someFunc <- function() {   summary <- function(x) tibble(sd = sd(x), mean = mean(x))    dg <- expand_tibble(fun = \"runif\", n = 100)   pg <- expand_tibble(proc = c(\"summary\", \"g\"))    # the standard is to use the global   # environment, hence summary defined outside   # of someFunc() will be used   print(eval_tibbles(dg, pg))   cat(\"--------------------------------------------------\\n\")   # will use the local defined summary, but g   # from the global environment, because   # g is not locally defined.   print(eval_tibbles(dg, pg, envir = environment())) } someFunc()  [38;5;246m# A tibble: 2 × 6 [39m   fun       n replications proc        sd   q0.1    [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<dbl> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m     [3m [38;5;246m<dbl> [39m [23m   [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m runif   100            1 summary  0.260  [31mNA [39m      [38;5;250m2 [39m runif   100            1 g        [31mNA [39m      0.123 Number of data generating functions: 1 Number of analyzing procedures: 2 Number of replications: 1 Estimated replications per hour: 2476544 Start of the simulation: 2025-04-05 13:33:21.271641 End of the simulation: 2025-04-05 13:33:21.273094 --------------------------------------------------  [38;5;246m# A tibble: 2 × 7 [39m   fun       n replications proc        sd   mean   q0.1    [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<dbl> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m     [3m [38;5;246m<dbl> [39m [23m   [3m [38;5;246m<dbl> [39m [23m   [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m runif   100            1 summary  0.282  0.512  [31mNA [39m      [38;5;250m2 [39m runif   100            1 g        [31mNA [39m      [31mNA [39m      0.147 Number of data generating functions: 1 Number of analyzing procedures: 2 Number of replications: 1 Estimated replications per hour: 3211974 Start of the simulation: 2025-04-05 13:33:21.300407 End of the simulation: 2025-04-05 13:33:21.301528"},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"truth-functionality","dir":"Articles","previous_headings":"The workhorse eval_tibbles","what":".truth-functionality","title":"The simTool package: Facilitate simulations","text":"Sometimes handy access parameter constellation used data generation (post) data analyzing phase. course, one write wrapper functions every data generating function append parameter constellation data generation attributes data set, purpose package reduce administrative source code. Hence (post) data analyzing function argument .truth, eval_tibbles manage hand-. brief example explain . Suppose want estimate bias empirical quantile estimator data normal distributed. want analysis different distrubtions modify post data analyzing function, can also simply add .truth-column data generating grid. case, information .truth-column directly passed .truth-parameter: fashion one write data analyzing function parameter .truth. go even step , store analytic quantile function .truth column: one keep mind one calculates quantile (post) analyzing phase happens replication level. precise lets look excerpt pseudo code beginning vignette: matter one extend data analyzing function f_1, … f_L post-analyze-function argument .truth calculation made every single replication step 10. Hence, operations vectorized!","code":"dg <- expand_tibble(fun = c(\"rnorm\"), mean = c(1,1000), sd = c(1,10), n = c(10L, 100L)) pg <- expand_tibble(proc = \"quantile\", probs = 0.975) post_ana <- function(q_est, .truth){   tibble::tibble(bias = q_est - stats::qnorm(0.975, mean = .truth$mean, sd = .truth$sd)) } eval_tibbles(dg, pg, replications = 10^3, discard_generated_data = TRUE,                    ncpus = 2,                    post_analyze = post_ana,                    summary_fun = list(mean = mean))  [38;5;246m# A tibble: 8 × 9 [39m   fun    mean    sd     n replications summary_fun proc     probs    bias    [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<int> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m        [3m [38;5;246m<chr> [39m [23m     [3m [38;5;246m<dbl> [39m [23m    [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m rnorm     1     1    10            1 mean        quantile 0.975 - [31m0 [39m [31m. [39m [31m573 [39m   [38;5;250m2 [39m rnorm   [4m1 [24m000     1    10            1 mean        quantile 0.975 - [31m0 [39m [31m. [39m [31m550 [39m   [38;5;250m3 [39m rnorm     1    10    10            1 mean        quantile 0.975 - [31m5 [39m [31m. [39m [31m58 [39m    [38;5;250m4 [39m rnorm   [4m1 [24m000    10    10            1 mean        quantile 0.975 - [31m5 [39m [31m. [39m [31m34 [39m    [38;5;250m5 [39m rnorm     1     1   100            1 mean        quantile 0.975 - [31m0 [39m [31m. [39m [31m0 [39m [31m76 [4m0 [24m [39m  [38;5;250m6 [39m rnorm   [4m1 [24m000     1   100            1 mean        quantile 0.975 - [31m0 [39m [31m. [39m [31m0 [39m [31m87 [4m9 [24m [39m  [38;5;250m7 [39m rnorm     1    10   100            1 mean        quantile 0.975 - [31m0 [39m [31m. [39m [31m685 [39m   [38;5;250m8 [39m rnorm   [4m1 [24m000    10   100            1 mean        quantile 0.975 - [31m0 [39m [31m. [39m [31m695 [39m  Number of data generating functions: 8 Number of analyzing procedures: 1 Number of replications: 1000 Estimated replications per hour: 1269290 Start of the simulation: 2025-04-05 13:33:21.650874 End of the simulation: 2025-04-05 13:33:24.487104 dg <- dplyr::bind_rows(   expand_tibble(fun = c(\"rnorm\"), mean = 0, n = c(10L, 100L), .truth = qnorm(0.975)),   expand_tibble(fun = c(\"rexp\"), rate = 1, n = c(10L, 100L), .truth = qexp(0.975, rate = 1)),   expand_tibble(fun = c(\"runif\"), max = 2, n = c(10L, 100L), .truth = qunif(0.975, max = 2)) ) pg <- expand_tibble(proc = \"quantile\", probs = 0.975) post_ana <- function(q_est, .truth){   ret <- q_est - .truth   names(ret) <- \"bias\"   ret } eval_tibbles(dg, pg, replications = 10^3, discard_generated_data = TRUE,                    ncpus = 2,                    post_analyze = post_ana,                    summary_fun = list(mean = mean))  [38;5;246m# A tibble: 6 × 11 [39m   fun    mean     n .truth  rate   max replications summary_fun proc     probs    bias    [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<int> [39m [23m   [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m        [3m [38;5;246m<chr> [39m [23m     [3m [38;5;246m<dbl> [39m [23m    [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m rnorm     0    10   1.96     [31mNA [39m     [31mNA [39m            1 mean        quantile 0.975 - [31m0 [39m [31m. [39m [31m573 [39m   [38;5;250m2 [39m rnorm     0   100   1.96     [31mNA [39m     [31mNA [39m            1 mean        quantile 0.975 - [31m0 [39m [31m. [39m [31m0 [39m [31m81 [4m8 [24m [39m  [38;5;250m3 [39m rexp      [31mNA [39m    10   3.69     1     [31mNA [39m            1 mean        quantile 0.975 - [31m0 [39m [31m. [39m [31m917 [39m   [38;5;250m4 [39m rexp      [31mNA [39m   100   3.69     1     [31mNA [39m            1 mean        quantile 0.975 - [31m0 [39m [31m. [39m [31m175 [39m   [38;5;250m5 [39m runif     [31mNA [39m    10   1.95     [31mNA [39m     2            1 mean        quantile 0.975 - [31m0 [39m [31m. [39m [31m174 [39m   [38;5;250m6 [39m runif     [31mNA [39m   100   1.95     [31mNA [39m     2            1 mean        quantile 0.975 - [31m0 [39m [31m. [39m [31m0 [39m [31m18 [4m3 [24m [39m Number of data generating functions: 6 Number of analyzing procedures: 1 Number of replications: 1000 Estimated replications per hour: 3310681 Start of the simulation: 2025-04-05 13:33:24.824956 End of the simulation: 2025-04-05 13:33:25.912345 dg <- dplyr::bind_rows(   expand_tibble(fun = c(\"rnorm\"), mean = 0, n = c(10L, 1000L),                  .truth = list(function(prob) qnorm(prob, mean = 0))),   expand_tibble(fun = c(\"rexp\"), rate = 1, n = c(10L, 1000L),                 .truth = list(function(prob) qexp(prob, rate = 1))),   expand_tibble(fun = c(\"runif\"), max = 2, n = c(10L, 1000L),                 .truth = list(function(prob) qunif(prob, max = 2))) ) bias_quantile <- function(x, prob, .truth) {   est <- quantile(x, probs = prob)   ret <- est - .truth[[1]](prob)   names(ret) <- \"bias\"   ret } pg <- expand_tibble(proc = \"bias_quantile\", prob = c(0.9, 0.975)) eval_tibbles(dg, pg, replications = 10^3, discard_generated_data = TRUE,                    ncpus = 1,                    summary_fun = list(mean = mean))  [38;5;246m# A tibble: 12 × 11 [39m    fun    mean     n .truth  rate   max replications summary_fun proc           prob      bias     [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<list> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m        [3m [38;5;246m<chr> [39m [23m          [3m [38;5;246m<dbl> [39m [23m      [3m [38;5;246m<dbl> [39m [23m  [38;5;250m 1 [39m rnorm     0    10  [38;5;246m<fn> [39m       [31mNA [39m     [31mNA [39m            1 mean        bias_quantile 0.9   - [31m0 [39m [31m. [39m [31m218 [39m     [38;5;250m 2 [39m rnorm     0    10  [38;5;246m<fn> [39m       [31mNA [39m     [31mNA [39m            1 mean        bias_quantile 0.975 - [31m0 [39m [31m. [39m [31m530 [39m     [38;5;250m 3 [39m rnorm     0   [4m1 [24m000  [38;5;246m<fn> [39m       [31mNA [39m     [31mNA [39m            1 mean        bias_quantile 0.9   - [31m0 [39m [31m. [39m [31m00 [39m [31m6 [4m2 [24m [4m6 [24m [39m   [38;5;250m 4 [39m rnorm     0   [4m1 [24m000  [38;5;246m<fn> [39m       [31mNA [39m     [31mNA [39m            1 mean        bias_quantile 0.975 - [31m0 [39m [31m. [39m [31m0 [39m [31m10 [4m6 [24m [39m    [38;5;250m 5 [39m rexp      [31mNA [39m    10  [38;5;246m<fn> [39m       1     [31mNA [39m            1 mean        bias_quantile 0.9   - [31m0 [39m [31m. [39m [31m275 [39m     [38;5;250m 6 [39m rexp      [31mNA [39m    10  [38;5;246m<fn> [39m       1     [31mNA [39m            1 mean        bias_quantile 0.975 - [31m0 [39m [31m. [39m [31m983 [39m     [38;5;250m 7 [39m rexp      [31mNA [39m   [4m1 [24m000  [38;5;246m<fn> [39m       1     [31mNA [39m            1 mean        bias_quantile 0.9   - [31m0 [39m [31m. [39m [31m00 [39m [31m2 [4m2 [24m [4m6 [24m [39m   [38;5;250m 8 [39m rexp      [31mNA [39m   [4m1 [24m000  [38;5;246m<fn> [39m       1     [31mNA [39m            1 mean        bias_quantile 0.975 - [31m0 [39m [31m. [39m [31m0 [39m [31m21 [4m7 [24m [39m    [38;5;250m 9 [39m runif     [31mNA [39m    10  [38;5;246m<fn> [39m       [31mNA [39m     2            1 mean        bias_quantile 0.9   - [31m0 [39m [31m. [39m [31m150 [39m     [38;5;250m10 [39m runif     [31mNA [39m    10  [38;5;246m<fn> [39m       [31mNA [39m     2            1 mean        bias_quantile 0.975 - [31m0 [39m [31m. [39m [31m173 [39m     [38;5;250m11 [39m runif     [31mNA [39m   [4m1 [24m000  [38;5;246m<fn> [39m       [31mNA [39m     2            1 mean        bias_quantile 0.9   - [31m0 [39m [31m. [39m [31m000 [39m [31m [4m5 [24m [4m2 [24m [4m4 [24m [39m  [38;5;250m12 [39m runif     [31mNA [39m   [4m1 [24m000  [38;5;246m<fn> [39m       [31mNA [39m     2            1 mean        bias_quantile 0.975 - [31m0 [39m [31m. [39m [31m00 [39m [31m2 [4m0 [24m [4m1 [24m [39m  Number of data generating functions: 6 Number of analyzing procedures: 2 Number of replications: 1000 Estimated replications per hour: 2109163 Start of the simulation: 2025-04-05 13:33:26.026188 End of the simulation: 2025-04-05 13:33:27.733026 6.  for g in  {g_1, ..., g_k}  7.      for r in 1:replications (optionally in a parallel manner)  8.          data = g()  9.          for f in  {f_1, \\ldots, f_L}  10.             append f(data) to the result object (optionally apply a post-analyze-function)"},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"some-examples","dir":"Articles","previous_headings":"","what":"Some Examples","title":"The simTool package: Facilitate simulations","text":"Note, following code examples use computational resources. order prevent checked/executed CRAN check farm, evaluated environment variable NOT_CRAN set “true”","code":"EVAL <- FALSE if (Sys.getenv(\"NOT_CRAN\") == \"true\") {   EVAL <- TRUE }"},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"sampling-distribution-of-mean-and-median-for-normal-and-exponential-distributed-data","dir":"Articles","previous_headings":"Some Examples","what":"Sampling distribution of mean and median for normal and exponential distributed data","title":"The simTool package: Facilitate simulations","text":"First define data generated, sample size 10 100: Afterwards define want analyze data: Finally, conduct simulation visualize results","code":"dg <- dplyr::bind_rows(   expand_tibble(fun = c(\"rnorm\"), mean = 1, n = c(10L, 100L)),   expand_tibble(fun = c(\"rexp\"), rate = 1, n = c(10L, 100L)) ) dg  [38;5;246m# A tibble: 4 × 4 [39m   fun    mean     n  rate    [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m rnorm     1    10     [31mNA [39m  [38;5;250m2 [39m rnorm     1   100     [31mNA [39m  [38;5;250m3 [39m rexp      [31mNA [39m    10     1  [38;5;250m4 [39m rexp      [31mNA [39m   100     1 pg <- expand_tibble(proc = c(\"mean\", \"median\")) pg  [38;5;246m# A tibble: 2 × 1 [39m   proc      [3m [38;5;246m<chr> [39m [23m   [38;5;250m1 [39m mean    [38;5;250m2 [39m median et <- eval_tibbles(dg, pg, replications = 10^4, ncpus = 2)  et$simulation %>%   ggplot(aes(x = results, color = interaction(fun, n), fill = interaction(fun, n))) +   geom_density(alpha = 0.3) +   facet_wrap(~ proc)"},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"comparing-bootstrap-confidence-intervals-with-classical-studentized-interval","dir":"Articles","previous_headings":"Some Examples","what":"Comparing bootstrap confidence intervals with classical studentized interval","title":"The simTool package: Facilitate simulations","text":"want compare confidence intervals generated boot::boot.ci() stats::t.test(). Unfortunately, boot::boot.ci() applied directly generated data sets. Therefore, write new function: Furthermore, boot::boot.ci() returns general one confidence interval structures returned boot::boot.ci() stats::t.test() also different. One solution write function t_test() calls stats::t.test(), modifies returned object additionally modify function bootstrap_ci function return objects unified structure. instead implement function later passed argument post_analyze eval_tibbles: can see, objects returned tibbles one row. Summarizing data replications general use variable type aspect grouping variables. can achieved using parameter group_for_summary eval_tibbles.","code":"bootstrap_ci <- function(x, conf.level, R = 999) {   b <- boot::boot(x, function(d, i) {     n <- length(i)     c(       mean = mean(d[i]),       variance = (n - 1) * var(d[i]) / n^2     )   }, R = R)   boot::boot.ci(b, conf = conf.level, type = \"all\") } post_analyze <- function(o, .truth) {   if (class(o) == \"htest\") {   #post-process the object returned by t.test     ci <- o$conf.int     return(tibble::tibble(       type = \"t.test\",       aspect = c(\"covered\", \"ci_length\"),       value = c(ci[1] <= .truth && .truth <= ci[2], ci[2] - ci[1])     ))   } else if (class(o) == \"bootci\") {   #post-process the object returned by boot.ci     method = c(\"normal\", \"basic\", \"student\", \"percent\", \"bca\")     ret = o[method]     lower = unlist(purrr::map(ret, ~dplyr::nth(.x[1,], -2)))     upper = unlist(purrr::map(ret, ~dplyr::nth(.x[1,], -1)))     type = paste(\"boot\", method, sep = \"_\")      return(       dplyr::bind_rows(       tibble::tibble(         type = type,          aspect = \"covered\",          value = as.integer(lower <= .truth & .truth <= upper)),       tibble::tibble(         type = type,          aspect = \"ci_length\",          value = upper - lower))     )   } }"},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"define-and-run-the-simulation","dir":"Articles","previous_headings":"Some Examples > Comparing bootstrap confidence intervals with classical studentized interval","what":"Define and run the simulation","title":"The simTool package: Facilitate simulations","text":"want generate normal-, uniform-, exponential distributed data: apply functions calculate confidence intervals using two different confidence levels. Note, structure objects returned quite different addressed function post_analyze. variables type aspect created post_analyze distinguish different confidence intervals. Since variables part result objects, eval_tibbles assumes variables results. order summarize results (calculating mean) replications correctly need tell eval_tibbles additional group variables type aspect: Finally, can visualize summarized results:","code":"dg <- dplyr::bind_rows(   simTool::expand_tibble(fun = \"rnorm\", n = 10L, mean = 0, sd = sqrt(3), .truth = 0),   simTool::expand_tibble(fun = \"runif\", n = 10L, max = 6, .truth = 3),   simTool::expand_tibble(fun = \"rexp\", n = 10L, rate = 1 / sqrt(3), .truth = sqrt(3)) ) dg  [38;5;246m# A tibble: 3 × 7 [39m   fun       n  mean    sd .truth   max   rate    [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m   [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m   [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m rnorm    10     0  1.73   0        [31mNA [39m  [31mNA [39m      [38;5;250m2 [39m runif    10     [31mNA [39m  [31mNA [39m      3        6  [31mNA [39m      [38;5;250m3 [39m rexp     10     [31mNA [39m  [31mNA [39m      1.73     [31mNA [39m  0.577 pg <- simTool::expand_tibble(   proc = c(\"t.test\",\"bootstrap_ci\"),   conf.level = c(0.9, 0.95) ) pg  [38;5;246m# A tibble: 4 × 2 [39m   proc         conf.level    [3m [38;5;246m<chr> [39m [23m              [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m t.test             0.9   [38;5;250m2 [39m bootstrap_ci       0.9   [38;5;250m3 [39m t.test             0.95  [38;5;250m4 [39m bootstrap_ci       0.95 et <- eval_tibbles(dg, pg,   replications = 10^3, ncpus = 2,   cluster_global_objects = \"post_analyze\",   post_analyze = post_analyze,   summary_fun = list(mean = mean),   group_for_summary = c(\"aspect\", \"type\") ) et  [38;5;246m# A tibble: 72 × 14 [39m    fun       n  mean    sd .truth   max  rate replications summary_fun proc  conf.level aspect type      [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m   [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m        [3m [38;5;246m<chr> [39m [23m       [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<chr> [39m [23m   [3m [38;5;246m<chr> [39m [23m  [38;5;250m 1 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 mean        t.te…        0.9 ci_le… t.te…  [38;5;250m 2 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 mean        t.te…        0.9 cover… t.te…  [38;5;250m 3 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 mean        boot…        0.9 ci_le… boot…  [38;5;250m 4 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 mean        boot…        0.9 ci_le… boot…  [38;5;250m 5 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 mean        boot…        0.9 ci_le… boot…  [38;5;250m 6 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 mean        boot…        0.9 ci_le… boot…  [38;5;250m 7 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 mean        boot…        0.9 ci_le… boot…  [38;5;250m 8 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 mean        boot…        0.9 cover… boot…  [38;5;250m 9 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 mean        boot…        0.9 cover… boot…  [38;5;250m10 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 mean        boot…        0.9 cover… boot…  [38;5;246m# ℹ 62 more rows [39m  [38;5;246m# ℹ 1 more variable: value <dbl> [39m Number of data generating functions: 3 Number of analyzing procedures: 4 Number of replications: 1000 Estimated replications per hour: 14643 Start of the simulation: 2025-04-05 13:33:31.416754 End of the simulation: 2025-04-05 13:37:37.259046 et$simulation %>%   ggplot(aes(x = fun, y = value, group = type, fill = type, label = round(value, 2))) +   geom_col(position = \"dodge\") +   geom_label(position = position_dodge(0.9), size = 3) +   theme(legend.position = \"bottom\") +    facet_grid(aspect ~ conf.level, scales = \"free\")"},{"path":"http://MarselScheer.github.io/simTool/articles/simTool.html","id":"a-different-implementation","dir":"Articles","previous_headings":"Some Examples > Comparing bootstrap confidence intervals with classical studentized interval","what":"A different implementation","title":"The simTool package: Facilitate simulations","text":"briefly realize simulation differently leveraging data analyzing functions unified return-objects:","code":"t_test = function(x, conf.level){   tt <- t.test(x, conf.level = conf.level)      # unify return   tibble::tibble(type = \"t.test\", lower = tt$conf.int[1], upper = tt$conf.int[2]) }  bootstrap_ci <- function(x, conf.level, R = 999) {   b <- boot::boot(x, function(d, i) {     n <- length(i)     c(       mean = mean(d[i]),       variance = (n - 1) * var(d[i]) / n^2     )   }, R = R)   ci <- boot::boot.ci(b, conf = conf.level, type = \"all\")   method = c(\"normal\", \"basic\", \"student\", \"percent\", \"bca\")   ret = ci[method]   lower = unlist(purrr::map(ret, ~dplyr::nth(.x[1,], -2)))   upper = unlist(purrr::map(ret, ~dplyr::nth(.x[1,], -1)))   type = paste(\"boot\", method, sep = \"_\")      # unify return   tibble::tibble(type = type, lower = lower, upper = upper) }  dg <- dplyr::bind_rows(   simTool::expand_tibble(fun = \"rnorm\", n = 10L, mean = 0, sd = sqrt(3), .truth = 0),   simTool::expand_tibble(fun = \"runif\", n = 10L, max = 6, .truth = 3),   simTool::expand_tibble(fun = \"rexp\", n = 10L, rate = 1 / sqrt(3), .truth = sqrt(3)) )  pg <- simTool::expand_tibble(   proc = c(\"t_test\",\"bootstrap_ci\"),   conf.level = c(0.9, 0.95) ) %>%    mutate(R = ifelse(proc == \"bootstrap_ci\", 100, NA))  et <- eval_tibbles(dg, pg,   replications = 10^2, ncpus = 2 ) et  [38;5;246m# A tibble: 3,600 × 14 [39m    fun       n  mean    sd .truth   max  rate replications proc  conf.level     R type  lower  upper     [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m   [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m         [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m       [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<dbl> [39m [23m   [3m [38;5;246m<dbl> [39m [23m  [38;5;250m 1 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 t_te…       0.9      [31mNA [39m t.te… - [31m1 [39m [31m. [39m [31m56 [39m 0.235   [38;5;250m 2 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 boot…       0.9    100 boot… - [31m1 [39m [31m. [39m [31m54 [39m 0.200   [38;5;250m 3 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 boot…       0.9    100 boot… - [31m1 [39m [31m. [39m [31m64 [39m 0.177   [38;5;250m 4 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 boot…       0.9    100 boot… - [31m1 [39m [31m. [39m [31m64 [39m 0.500   [38;5;250m 5 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 boot…       0.9    100 boot… - [31m1 [39m [31m. [39m [31m51 [39m 0.312   [38;5;250m 6 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 boot…       0.9    100 boot… - [31m1 [39m [31m. [39m [31m54 [39m 0.098 [4m7 [24m  [38;5;250m 7 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 t_te…       0.95     [31mNA [39m t.te… - [31m1 [39m [31m. [39m [31m77 [39m 0.446   [38;5;250m 8 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 boot…       0.95   100 boot… - [31m1 [39m [31m. [39m [31m57 [39m 0.123   [38;5;250m 9 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 boot…       0.95   100 boot… - [31m1 [39m [31m. [39m [31m73 [39m 0.257   [38;5;250m10 [39m rnorm    10     0  1.73      0     [31mNA [39m     [31mNA [39m            1 boot…       0.95   100 boot… - [31m1 [39m [31m. [39m [31m83 [39m 0.716   [38;5;246m# ℹ 3,590 more rows [39m Number of data generating functions: 3 Number of analyzing procedures: 4 Number of replications: 100 Estimated replications per hour: 153054 Start of the simulation: 2025-04-05 13:37:38.744685 End of the simulation: 2025-04-05 13:37:41.096785 grps <- et$simulation %>%    select(-replications) %>%    select(fun:type) %>%    names  et$simulation %>%    mutate(covered = lower <= .truth & .truth <= upper,          ci_length = upper - lower) %>%    group_by(.dots = grps) %>%    summarise(coverage = mean(covered),             ci_length = mean(ci_length))  [1m [22m`summarise()` has grouped output by 'fun', 'n', 'mean', 'sd', '.truth', 'max', 'rate', 'proc', 'conf.level', 'R'. You can override using the `.groups` argument.  [38;5;246m# A tibble: 36 × 13 [39m  [38;5;246m# Groups:   fun, n, mean, sd, .truth, max, rate, proc, conf.level, R [12] [39m    fun       n  mean    sd .truth   max  rate proc         conf.level     R type  coverage ci_length     [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m   [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<chr> [39m [23m              [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<chr> [39m [23m     [3m [38;5;246m<dbl> [39m [23m      [3m [38;5;246m<dbl> [39m [23m  [38;5;250m 1 [39m rexp     10     [31mNA [39m     [31mNA [39m   1.73     [31mNA [39m 0.577 bootstrap_ci       0.9    100 boot…     0.8       1.61  [38;5;250m 2 [39m rexp     10     [31mNA [39m     [31mNA [39m   1.73     [31mNA [39m 0.577 bootstrap_ci       0.9    100 boot…     0.8       1.76  [38;5;250m 3 [39m rexp     10     [31mNA [39m     [31mNA [39m   1.73     [31mNA [39m 0.577 bootstrap_ci       0.9    100 boot…     0.8       1.60  [38;5;250m 4 [39m rexp     10     [31mNA [39m     [31mNA [39m   1.73     [31mNA [39m 0.577 bootstrap_ci       0.9    100 boot…     0.81      1.61  [38;5;250m 5 [39m rexp     10     [31mNA [39m     [31mNA [39m   1.73     [31mNA [39m 0.577 bootstrap_ci       0.9    100 boot…     0.88      2.42  [38;5;250m 6 [39m rexp     10     [31mNA [39m     [31mNA [39m   1.73     [31mNA [39m 0.577 bootstrap_ci       0.95   100 boot…     0.82      1.93  [38;5;250m 7 [39m rexp     10     [31mNA [39m     [31mNA [39m   1.73     [31mNA [39m 0.577 bootstrap_ci       0.95   100 boot…     0.85      2.03  [38;5;250m 8 [39m rexp     10     [31mNA [39m     [31mNA [39m   1.73     [31mNA [39m 0.577 bootstrap_ci       0.95   100 boot…     0.83      1.89  [38;5;250m 9 [39m rexp     10     [31mNA [39m     [31mNA [39m   1.73     [31mNA [39m 0.577 bootstrap_ci       0.95   100 boot…     0.85      1.93  [38;5;250m10 [39m rexp     10     [31mNA [39m     [31mNA [39m   1.73     [31mNA [39m 0.577 bootstrap_ci       0.95   100 boot…     0.93      3.26  [38;5;246m# ℹ 26 more rows [39m"},{"path":"http://MarselScheer.github.io/simTool/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marsel Scheer. Author, maintainer.","code":""},{"path":"http://MarselScheer.github.io/simTool/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Scheer M (2025). simTool: Conduct Simulation Studies Minimal Amount Source Code. R package version 1.1.7.9000, http://MarselScheer.github.io/simTool.","code":"@Manual{,   title = {simTool: Conduct Simulation Studies with a Minimal Amount of Source Code},   author = {Marsel Scheer},   year = {2025},   note = {R package version 1.1.7.9000},   url = {http://MarselScheer.github.io/simTool}, }"},{"path":"http://MarselScheer.github.io/simTool/index.html","id":"simtool","dir":"","previous_headings":"","what":"Conduct Simulation Studies with a Minimal Amount of Source Code","title":"Conduct Simulation Studies with a Minimal Amount of Source Code","text":"R-Package facilitates simulation studies. disengages researcher administrative source code. simTool package designed statistical simulations two components. One component generates data one analyzes data. main aims simTool package reduction administrative source code (mainly loops management code results) simple applicability package allows user quickly learn work simTool package. Parallel computing also supported. Finally, convenient functions provided summarize simulation results.","code":""},{"path":"http://MarselScheer.github.io/simTool/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Conduct Simulation Studies with a Minimal Amount of Source Code","text":"small simulation (using 4 cores) illustrates confidence interval based t-distribution performs exponential distributed random variables. following lines generate exponential distributed random variables size 10, 50, 100, 1000. Afterwards t.test using confidence levels 0.8, 0.9, 0.95 applied. repeated 1000 times estimate coverage:","code":"library(simTool) dg <- expand_tibble(fun = \"rexp\", rate = 10, n = c(10L, 50L, 100L, 1000L)) pg <- expand_tibble(proc = \"t.test\", conf.level = c(0.8, 0.9, 0.95)) et <- eval_tibbles(dg, pg,    ncpus = 4,   replications = 10^3,   post_analyze = function(ttest) tibble::tibble(     coverage = ttest$conf.int[1] <= 1 / 10 && 1 / 10 <= ttest$conf.int[2]),   summary_fun = list(mean = mean) ) et #> # A tibble: 12 × 8 #>    fun    rate     n replications summary_fun proc   conf.level coverage #>    <chr> <dbl> <int>        <int> <chr>       <chr>       <dbl>    <dbl> #>  1 rexp     10    10            1 mean        t.test       0.8     0.754 #>  2 rexp     10    10            1 mean        t.test       0.9     0.855 #>  3 rexp     10    10            1 mean        t.test       0.95    0.905 #>  4 rexp     10    50            1 mean        t.test       0.8     0.808 #>  5 rexp     10    50            1 mean        t.test       0.9     0.905 #>  6 rexp     10    50            1 mean        t.test       0.95    0.945 #>  7 rexp     10   100            1 mean        t.test       0.8     0.792 #>  8 rexp     10   100            1 mean        t.test       0.9     0.895 #>  9 rexp     10   100            1 mean        t.test       0.95    0.936 #> 10 rexp     10  1000            1 mean        t.test       0.8     0.796 #> 11 rexp     10  1000            1 mean        t.test       0.9     0.897 #> 12 rexp     10  1000            1 mean        t.test       0.95    0.953 #> Number of data generating functions: 4 #> Number of analyzing procedures: 3 #> Number of replications: 1000 #> Estimated replications per hour: 1318457 #> Start of the simulation: 2025-04-05 05:37:59.800157 #> End of the simulation: 2025-04-05 05:38:02.530619"},{"path":"http://MarselScheer.github.io/simTool/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Conduct Simulation Studies with a Minimal Amount of Source Code","text":"can install simTool github : CRAN :","code":"remotes::install_github(\"MarselScheer/simTool\") install.packages(\"simTool\")"},{"path":"http://MarselScheer.github.io/simTool/index.html","id":"test-suite","dir":"","previous_headings":"","what":"Test suite","title":"Conduct Simulation Studies with a Minimal Amount of Source Code","text":"tinytest can rerun test simTool calling","code":"# install.packages(\"tinytest\") tinytest::test_package(\"simTool\")"},{"path":"http://MarselScheer.github.io/simTool/reference/eval_tibbles.html","id":null,"dir":"Reference","previous_headings":"","what":"Workhorse for simulation studies — eval_tibbles","title":"Workhorse for simulation studies — eval_tibbles","text":"Generates data according provided  constellations data_tibble applies  provided constellations proc_tibble  .","code":""},{"path":"http://MarselScheer.github.io/simTool/reference/eval_tibbles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Workhorse for simulation studies — eval_tibbles","text":"","code":"eval_tibbles(   data_grid,   proc_grid = expand_tibble(proc = \"length\"),   replications = 1,   discard_generated_data = FALSE,   post_analyze = identity,   summary_fun = NULL,   group_for_summary = NULL,   ncpus = 1L,   cluster = NULL,   cluster_seed = rep(12345, 6),   cluster_libraries = NULL,   cluster_global_objects = NULL,   envir = globalenv(),   simplify = TRUE )"},{"path":"http://MarselScheer.github.io/simTool/reference/eval_tibbles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workhorse for simulation studies — eval_tibbles","text":"data_grid data.frame tibble first column character vector function names. columns contain parameters functions specified first column. Parameters NA ignored. column name .truth exist, corresponding entry passed functions   generated proc_grid function specified post_analyze. proc_grid similar data_grid first column must contain function names. columns contain parameters functions specified first column. data generated according data_grid always passed first unspecified argument functions specified first column proc_grid. function specified proc_grid argument .truth, corresponding entry .truth column data_grid passed .truth parameter column .truth exist data_grid, parameters used data generation passed .truth parameter. replications number replications simulation discard_generated_data TRUE generated data deleted function constellations proc_grid applied. Otherwise, generated data sets part returned object. post_analyze convenience function, applied directly data analyzing function. function argument .truth, corresponding entry .truth column data_grid passed .truth parameter column .truth exist data_grid, parameters used data generation passed .truth parameter. summary_fun named list univariate function summarize results (numeric logical) replications, e.g. list(mean = mean, sd = sd). group_for_summary result returned data analyzing function  post_analyze data.frame one row, one usually interested summarizing results grouping variables. group variables can passed character vector group_for_summary ncpus cluster ncpus workers (R-processes) created local machine conduct simulation. ncpus equals one cluster created simulation conducted current R-process. cluster cluster generated parallel package used conduct simulation. cluster specified, ncpus ignored. cluster_seed simulation done parallel manner, combined multiple-recursive generator L'Ecuyer (1999) used generate random numbers. Thus cluster_seed must (signed) integer vector length 6. 6 elements seed internally regarded 32-bit unsigned integers. Neither first three last three zero, limited less 4294967087 4294944443 respectively. cluster_libraries character vector specifying packages loaded workers. cluster_global_objects character vector specifying names R objects global environment exported global environment every worker. envir must provided functions specified data_grid proc_grid part global environment. simplify usually result column nested, default tried unnest .","code":""},{"path":"http://MarselScheer.github.io/simTool/reference/eval_tibbles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Workhorse for simulation studies — eval_tibbles","text":"returned object list class  eval_tibbles, element simulations contain  results simulation.","code":""},{"path":"http://MarselScheer.github.io/simTool/reference/eval_tibbles.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Workhorse for simulation studies — eval_tibbles","text":"cluster provided user  function eval_tibbles stop cluster.  done user. Conducting parallel  simulations specifying ncpus internally  create cluster stop simulation  done.","code":""},{"path":"http://MarselScheer.github.io/simTool/reference/eval_tibbles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Workhorse for simulation studies — eval_tibbles","text":"Marsel Scheer","code":""},{"path":"http://MarselScheer.github.io/simTool/reference/eval_tibbles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Workhorse for simulation studies — eval_tibbles","text":"","code":"rng <- function(data, ...) {   ret <- range(data)   names(ret) <- c(\"min\", \"max\")   ret }  ### The following line is only necessary ### if the examples are not executed in the global ### environment, which for instance is the case when ### the oneline-documentation ### http://marselscheer.github.io/simTool/reference/eval_tibbles.html ### is build. In such case eval_tibble() would search the ### above defined function rng() in the global environment where ### it does not exist! eval_tibbles <- purrr::partial(eval_tibbles, envir = environment())  dg <- expand_tibble(fun = \"rnorm\", n = c(5L, 10L)) pg <- expand_tibble(proc = c(\"rng\", \"median\", \"length\"))  eval_tibbles(dg, pg, rep = 2, simplify = FALSE) #> # A tibble: 12 × 5 #>    fun       n replications proc   results   #>    <chr> <int>        <int> <chr>  <list>    #>  1 rnorm     5            1 rng    <dbl [2]> #>  2 rnorm     5            1 median <dbl [1]> #>  3 rnorm     5            1 length <int [1]> #>  4 rnorm     5            2 rng    <dbl [2]> #>  5 rnorm     5            2 median <dbl [1]> #>  6 rnorm     5            2 length <int [1]> #>  7 rnorm    10            1 rng    <dbl [2]> #>  8 rnorm    10            1 median <dbl [1]> #>  9 rnorm    10            1 length <int [1]> #> 10 rnorm    10            2 rng    <dbl [2]> #> 11 rnorm    10            2 median <dbl [1]> #> 12 rnorm    10            2 length <int [1]> #> Number of data generating functions: 2 #> Number of analyzing procedures: 3 #> Number of replications: 2 #> Estimated replications per hour: 14972230 #> Start of the simulation: 2025-04-05 13:33:13.444058 #> End of the simulation: 2025-04-05 13:33:13.444539 eval_tibbles(dg, pg, rep = 2) #> # A tibble: 16 × 5 #>    fun       n replications proc   results #>    <chr> <int>        <int> <chr>    <dbl> #>  1 rnorm     5            1 rng     0.112  #>  2 rnorm     5            1 rng     1.62   #>  3 rnorm     5            1 median  0.244  #>  4 rnorm     5            1 length  5      #>  5 rnorm     5            2 rng    -1.91   #>  6 rnorm     5            2 rng     1.07   #>  7 rnorm     5            2 median -0.279  #>  8 rnorm     5            2 length  5      #>  9 rnorm    10            1 rng    -1.91   #> 10 rnorm    10            1 rng     2.76   #> 11 rnorm    10            1 median  0.0583 #> 12 rnorm    10            1 length 10      #> 13 rnorm    10            2 rng    -2.27   #> 14 rnorm    10            2 rng     2.68   #> 15 rnorm    10            2 median  0.0244 #> 16 rnorm    10            2 length 10      #> Number of data generating functions: 2 #> Number of analyzing procedures: 3 #> Number of replications: 2 #> Estimated replications per hour: 23519461 #> Start of the simulation: 2025-04-05 13:33:13.497577 #> End of the simulation: 2025-04-05 13:33:13.497884 eval_tibbles(dg, pg,   rep = 2,   post_analyze = purrr::compose(as.data.frame, t) ) #> # A tibble: 12 × 7 #>    fun       n replications proc     min   max     V1 #>    <chr> <int>        <int> <chr>  <dbl> <dbl>  <dbl> #>  1 rnorm     5            1 rng    -1.18  1.11 NA     #>  2 rnorm     5            1 median NA    NA    -0.246 #>  3 rnorm     5            1 length NA    NA     5     #>  4 rnorm     5            2 rng    -1.70  1.07 NA     #>  5 rnorm     5            2 median NA    NA     0.132 #>  6 rnorm     5            2 length NA    NA     5     #>  7 rnorm    10            1 rng    -1.47  1.34 NA     #>  8 rnorm    10            1 median NA    NA     0.260 #>  9 rnorm    10            1 length NA    NA    10     #> 10 rnorm    10            2 rng    -2.61  1.92 NA     #> 11 rnorm    10            2 median NA    NA     0.495 #> 12 rnorm    10            2 length NA    NA    10     #> Number of data generating functions: 2 #> Number of analyzing procedures: 3 #> Number of replications: 2 #> Estimated replications per hour: 1345586 #> Start of the simulation: 2025-04-05 13:33:13.533248 #> End of the simulation: 2025-04-05 13:33:13.538599 eval_tibbles(dg, pg, rep = 2, summary_fun = list(mean = mean, sd = sd)) #> # A tibble: 12 × 8 #>    fun       n replications summary_fun proc       min    max  value #>    <chr> <int>        <int> <chr>       <chr>    <dbl>  <dbl>  <dbl> #>  1 rnorm     5            1 mean        rng    -0.196   1.37  NA     #>  2 rnorm     5            1 mean        median NA      NA      0.716 #>  3 rnorm     5            1 mean        length NA      NA      5     #>  4 rnorm     5            1 sd          rng     0.224   0.431 NA     #>  5 rnorm     5            1 sd          median NA      NA      0.325 #>  6 rnorm     5            1 sd          length NA      NA      0     #>  7 rnorm    10            1 mean        rng    -1.72    1.55  NA     #>  8 rnorm    10            1 mean        median NA      NA     -0.185 #>  9 rnorm    10            1 mean        length NA      NA     10     #> 10 rnorm    10            1 sd          rng     0.0509  0.812 NA     #> 11 rnorm    10            1 sd          median NA      NA      0.621 #> 12 rnorm    10            1 sd          length NA      NA      0     #> Number of data generating functions: 2 #> Number of analyzing procedures: 3 #> Number of replications: 2 #> Estimated replications per hour: 257639 #> Start of the simulation: 2025-04-05 13:33:13.570665 #> End of the simulation: 2025-04-05 13:33:13.598611  regData <- function(n, SD) {   data.frame(     x = seq(0, 1, length = n),     y = rnorm(n, sd = SD)   ) }  eg <- eval_tibbles(   expand_tibble(fun = \"regData\", n = 5L, SD = 1:2),   expand_tibble(proc = \"lm\", formula = c(\"y~x\", \"y~I(x^2)\")),   replications = 3 ) eg #> # A tibble: 12 × 7 #>    fun         n    SD replications proc  formula  results #>    <chr>   <int> <int>        <int> <chr> <chr>    <list>  #>  1 regData     5     1            1 lm    y~x      <lm>    #>  2 regData     5     1            1 lm    y~I(x^2) <lm>    #>  3 regData     5     1            2 lm    y~x      <lm>    #>  4 regData     5     1            2 lm    y~I(x^2) <lm>    #>  5 regData     5     1            3 lm    y~x      <lm>    #>  6 regData     5     1            3 lm    y~I(x^2) <lm>    #>  7 regData     5     2            1 lm    y~x      <lm>    #>  8 regData     5     2            1 lm    y~I(x^2) <lm>    #>  9 regData     5     2            2 lm    y~x      <lm>    #> 10 regData     5     2            2 lm    y~I(x^2) <lm>    #> 11 regData     5     2            3 lm    y~x      <lm>    #> 12 regData     5     2            3 lm    y~I(x^2) <lm>    #> Number of data generating functions: 2 #> Number of analyzing procedures: 2 #> Number of replications: 3 #> Estimated replications per hour: 1262464 #> Start of the simulation: 2025-04-05 13:33:13.636065 #> End of the simulation: 2025-04-05 13:33:13.64462  presever_rownames <- function(mat) {   rn <- rownames(mat)   ret <- tibble::as_tibble(mat)   ret$term <- rn   ret }  eg <- eval_tibbles(   expand_tibble(fun = \"regData\", n = 5L, SD = 1:2),   expand_tibble(proc = \"lm\", formula = c(\"y~x\", \"y~I(x^2)\")),   post_analyze = purrr::compose(presever_rownames, coef, summary),   # post_analyze = broom::tidy, # is a nice out of the box alternative   summary_fun = list(mean = mean, sd = sd),   group_for_summary = \"term\",   replications = 3 ) #> Warning: The `.dots` argument of `group_by()` is deprecated as of dplyr 1.0.0. #> ℹ The deprecated feature was likely used in the dplyr package. #>   Please report the issue at <https://github.com/tidyverse/dplyr/issues>. eg$simulation #> # A tibble: 16 × 12 #>    fun         n    SD replications summary_fun proc  formula  term     Estimate #>    <chr>   <int> <int>        <int> <chr>       <chr> <chr>    <chr>       <dbl> #>  1 regData     5     1            1 mean        lm    y~x      (Interc…   -0.137 #>  2 regData     5     1            1 mean        lm    y~x      x           0.148 #>  3 regData     5     1            1 mean        lm    y~I(x^2) (Interc…   -0.121 #>  4 regData     5     1            1 mean        lm    y~I(x^2) I(x^2)      0.154 #>  5 regData     5     1            1 sd          lm    y~x      (Interc…    0.330 #>  6 regData     5     1            1 sd          lm    y~x      x           0.298 #>  7 regData     5     1            1 sd          lm    y~I(x^2) (Interc…    0.240 #>  8 regData     5     1            1 sd          lm    y~I(x^2) I(x^2)      0.913 #>  9 regData     5     2            1 mean        lm    y~x      (Interc…   -1.05  #> 10 regData     5     2            1 mean        lm    y~x      x           2.58  #> 11 regData     5     2            1 mean        lm    y~I(x^2) (Interc…   -0.851 #> 12 regData     5     2            1 mean        lm    y~I(x^2) I(x^2)      2.91  #> 13 regData     5     2            1 sd          lm    y~x      (Interc…    0.754 #> 14 regData     5     2            1 sd          lm    y~x      x           0.492 #> 15 regData     5     2            1 sd          lm    y~I(x^2) (Interc…    0.667 #> 16 regData     5     2            1 sd          lm    y~I(x^2) I(x^2)      0.655 #> # ℹ 3 more variables: `Std. Error` <dbl>, `t value` <dbl>, `Pr(>|t|)` <dbl>  dg <- expand_tibble(fun = \"rexp\", rate = c(10, 100), n = c(50L, 100L)) pg <- expand_tibble(proc = c(\"t.test\"), conf.level = c(0.8, 0.9, 0.95)) et <- eval_tibbles(dg, pg,   ncpus = 1,   replications = 10^1,   post_analyze = function(ttest, .truth) {     mu <- 1 / .truth$rate     ttest$conf.int[1] <= mu && mu <= ttest$conf.int[2]   },   summary_fun = list(mean = mean, sd = sd) ) et #> # A tibble: 24 × 8 #>    fun    rate     n replications summary_fun proc   conf.level value #>    <chr> <dbl> <int>        <int> <chr>       <chr>       <dbl> <dbl> #>  1 rexp     10    50            1 mean        t.test       0.8  0.9   #>  2 rexp     10    50            1 mean        t.test       0.9  0.9   #>  3 rexp     10    50            1 mean        t.test       0.95 0.9   #>  4 rexp     10    50            1 sd          t.test       0.8  0.316 #>  5 rexp     10    50            1 sd          t.test       0.9  0.316 #>  6 rexp     10    50            1 sd          t.test       0.95 0.316 #>  7 rexp    100    50            1 mean        t.test       0.8  0.6   #>  8 rexp    100    50            1 mean        t.test       0.9  0.7   #>  9 rexp    100    50            1 mean        t.test       0.95 0.7   #> 10 rexp    100    50            1 sd          t.test       0.8  0.516 #> # ℹ 14 more rows #> Number of data generating functions: 4 #> Number of analyzing procedures: 3 #> Number of replications: 10 #> Estimated replications per hour: 276175 #> Start of the simulation: 2025-04-05 13:33:13.852719 #> End of the simulation: 2025-04-05 13:33:13.983071  dg <- dplyr::bind_rows(   expand_tibble(fun = \"rexp\", rate = 10, .truth = 1 / 10, n = c(50L, 100L)),   expand_tibble(fun = \"rnorm\", .truth = 0, n = c(50L, 100L)) ) pg <- expand_tibble(proc = c(\"t.test\"), conf.level = c(0.8, 0.9, 0.95)) et <- eval_tibbles(dg, pg,   ncpus = 1,   replications = 10^1,   post_analyze = function(ttest, .truth) {     ttest$conf.int[1] <= .truth && .truth <= ttest$conf.int[2]   },   summary_fun = list(mean = mean, sd = sd) ) et #> # A tibble: 24 × 9 #>    fun    rate .truth     n replications summary_fun proc   conf.level value #>    <chr> <dbl>  <dbl> <int>        <int> <chr>       <chr>       <dbl> <dbl> #>  1 rexp     10    0.1    50            1 mean        t.test       0.8  0.9   #>  2 rexp     10    0.1    50            1 mean        t.test       0.9  0.9   #>  3 rexp     10    0.1    50            1 mean        t.test       0.95 1     #>  4 rexp     10    0.1    50            1 sd          t.test       0.8  0.316 #>  5 rexp     10    0.1    50            1 sd          t.test       0.9  0.316 #>  6 rexp     10    0.1    50            1 sd          t.test       0.95 0     #>  7 rexp     10    0.1   100            1 mean        t.test       0.8  0.6   #>  8 rexp     10    0.1   100            1 mean        t.test       0.9  0.7   #>  9 rexp     10    0.1   100            1 mean        t.test       0.95 0.8   #> 10 rexp     10    0.1   100            1 sd          t.test       0.8  0.516 #> # ℹ 14 more rows #> Number of data generating functions: 4 #> Number of analyzing procedures: 3 #> Number of replications: 10 #> Estimated replications per hour: 532337 #> Start of the simulation: 2025-04-05 13:33:14.019451 #> End of the simulation: 2025-04-05 13:33:14.087077 ### need to remove the locally adapted eval_tibbles() ### otherwise executing the examples would mask ### eval_tibbles from simTool-namespace. rm(eval_tibbles)"},{"path":"http://MarselScheer.github.io/simTool/reference/expand_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a tibble from All Combinations — expand_tibble","title":"Creates a tibble from All Combinations — expand_tibble","text":"Actually wrapper expand.grid,  character vectors stay characters.","code":""},{"path":"http://MarselScheer.github.io/simTool/reference/expand_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a tibble from All Combinations — expand_tibble","text":"","code":"expand_tibble(...)"},{"path":"http://MarselScheer.github.io/simTool/reference/expand_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a tibble from All Combinations — expand_tibble","text":"... vectors, factors list containing .","code":""},{"path":"http://MarselScheer.github.io/simTool/reference/expand_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a tibble from All Combinations — expand_tibble","text":"See expand.grid instead  data.frame  tibble returned.","code":""},{"path":[]},{"path":"http://MarselScheer.github.io/simTool/reference/expand_tibble.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates a tibble from All Combinations — expand_tibble","text":"Marsel Scheer","code":""},{"path":"http://MarselScheer.github.io/simTool/reference/expand_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a tibble from All Combinations — expand_tibble","text":"","code":"expand_tibble(fun = \"rnorm\", mean = 1:4, sd = 2:5) #> # A tibble: 16 × 3 #>    fun    mean    sd #>    <chr> <int> <int> #>  1 rnorm     1     2 #>  2 rnorm     2     2 #>  3 rnorm     3     2 #>  4 rnorm     4     2 #>  5 rnorm     1     3 #>  6 rnorm     2     3 #>  7 rnorm     3     3 #>  8 rnorm     4     3 #>  9 rnorm     1     4 #> 10 rnorm     2     4 #> 11 rnorm     3     4 #> 12 rnorm     4     4 #> 13 rnorm     1     5 #> 14 rnorm     2     5 #> 15 rnorm     3     5 #> 16 rnorm     4     5"},{"path":"http://MarselScheer.github.io/simTool/reference/print.eval_tibbles.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing simulation results — print.eval_tibbles","title":"Printing simulation results — print.eval_tibbles","text":"Prints objects created eval_tibbles()","code":""},{"path":"http://MarselScheer.github.io/simTool/reference/print.eval_tibbles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing simulation results — print.eval_tibbles","text":"","code":"# S3 method for class 'eval_tibbles' print(x, ...)"},{"path":"http://MarselScheer.github.io/simTool/reference/print.eval_tibbles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing simulation results — print.eval_tibbles","text":"x object class eval_tibbles ... used. necessary define function consistently respect print(x, ...)","code":""},{"path":"http://MarselScheer.github.io/simTool/reference/print.eval_tibbles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Printing simulation results — print.eval_tibbles","text":"Marsel Scheer","code":""},{"path":"http://MarselScheer.github.io/simTool/news/index.html","id":"version-1179000","dir":"Changelog","previous_headings":"","what":"Version 1.1.7.9000","title":"Version 1.1.7.9000","text":"Upcoming R-version allow apply attr() primitives assign values. Fix decorating primitives used.","code":""},{"path":"http://MarselScheer.github.io/simTool/news/index.html","id":"version-117","dir":"Changelog","previous_headings":"","what":"Version 1.1.7","title":"Version 1.1.7","text":"CRAN release: 2020-09-22 replication data generated used data analyzing functions. already case default setting generated data sets stored eval_tibbles() now also case generated data discarded eval_tibbles() function.","code":""},{"path":"http://MarselScheer.github.io/simTool/news/index.html","id":"version-116","dir":"Changelog","previous_headings":"","what":"Version 1.1.6","title":"Version 1.1.6","text":"CRAN release: 2020-05-17 Misc: internal updated dplyr 1.0.0 vctrs 0.3.0 internal correction based lintr-findings","code":""},{"path":"http://MarselScheer.github.io/simTool/news/index.html","id":"version-115","dir":"Changelog","previous_headings":"","what":"Version 1.1.5","title":"Version 1.1.5","text":"CRAN release: 2020-03-15 Misc: removing functions expandGrid() evalGrid() (marked deprecated version 1.1.0) corresponding dependencies reshape plyr retrieve RNG kind parallel computation","code":""},{"path":"http://MarselScheer.github.io/simTool/news/index.html","id":"version-114","dir":"Changelog","previous_headings":"","what":"Version 1.1.4","title":"Version 1.1.4","text":"CRAN release: 2019-09-14 Misc: adaptions address new release tidyr 1.0.0 Note: due https://github.com/r-lib/vctrs/issues/530 reshaping simulation results can extremely slow. costly reshaping happen parameter simplify set FALSE simTool::eval_tibbles.","code":""},{"path":"http://MarselScheer.github.io/simTool/news/index.html","id":"version-113","dir":"Changelog","previous_headings":"","what":"Version 1.1.3","title":"Version 1.1.3","text":"CRAN release: 2019-03-22 Misc: test cases update address new release dplyr 0.8.0","code":""},{"path":"http://MarselScheer.github.io/simTool/news/index.html","id":"version-112","dir":"Changelog","previous_headings":"","what":"Version 1.1.2","title":"Version 1.1.2","text":"CRAN release: 2019-02-02 Misc: using workaround examples vignette circumvent bug introduced purrr 0.3.0 (https://github.com/tidyverse/purrr/issues/629)","code":""},{"path":"http://MarselScheer.github.io/simTool/news/index.html","id":"version-111","dir":"Changelog","previous_headings":"","what":"Version 1.1.1","title":"Version 1.1.1","text":"CRAN release: 2019-01-13 Misc: .truth-functionality added, .e. parameters data generation (alternatively column data generating matrix name .truth) passed data analyzing functions, see vignette details Unnesting simulation results improved","code":""},{"path":"http://MarselScheer.github.io/simTool/news/index.html","id":"version-110","dir":"Changelog","previous_headings":"","what":"Version 1.1.0","title":"Version 1.1.0","text":"CRAN release: 2018-03-26 Misc: Refactoring order remove dependency reshape plyr simulation now tibble instead list lists","code":""},{"path":"http://MarselScheer.github.io/simTool/news/index.html","id":"version-103","dir":"Changelog","previous_headings":"","what":"Version 1.0.3","title":"Version 1.0.3","text":"CRAN release: 2014-10-25 Misc: Adapted libraries loaded onto cluster","code":""},{"path":"http://MarselScheer.github.io/simTool/news/index.html","id":"version-102","dir":"Changelog","previous_headings":"","what":"Version 1.0.2","title":"Version 1.0.2","text":"CRAN release: 2014-10-15 New Features: convenient function meanAndNormCI added Misc: Two parameter renamed (post.proc summary.fun value.fun convert.result.fun). course, renaming parameters one worst things one can . hand, users affected changes.","code":""},{"path":"http://MarselScheer.github.io/simTool/news/index.html","id":"version-101","dir":"Changelog","previous_headings":"","what":"Version 1.0.1","title":"Version 1.0.1","text":"New Features: summarizing functions process also logical results (numeric) Misc: HTML vignette (LaTeX necessary anymore) additional documentation (static pdf JSS style)","code":""},{"path":"http://MarselScheer.github.io/simTool/news/index.html","id":"version-10","dir":"Changelog","previous_headings":"","what":"Version 1.0","title":"Version 1.0","text":"CRAN release: 2014-07-08 Initial release parallel computing via parallel ideas L’Ecuyer 1999, 2002 random numbers fallback capability text progress bar estimation number replications per hour","code":""}]
